#pragma once

#if defined(SEL_WIN)
# include <winerror.h>

# define NATIVE_ERR(e)                e
# define SOCKET_ERR(e)                WSA##e
# define WIN_OR_POSIX(e_win, e_posix) e_win
#else
# include <cerrno>

# define NATIVE_ERR(e)                e
# define SOCKET_ERR(e)                e
# define WIN_OR_POSIX(e_win, e_posix) e_posix
#endif

namespace sel::net::error {

enum Errors {
  ACCESS_DENIED = SOCKET_ERR(EACCES),
  ADDRESS_IN_USE = SOCKET_ERR(EADDRINUSE),
  ALREADY_CONNECTED = SOCKET_ERR(EISCONN),
  ALREADY_STARTED = SOCKET_ERR(EALREADY),
  CONNECTION_ABORTED = SOCKET_ERR(ECONNABORTED),
  CONNECTION_REFUSED = SOCKET_ERR(ECONNREFUSED),
  CONNECTION_RESET = SOCKET_ERR(ECONNRESET),
  BAD_DESCRIPTOR = SOCKET_ERR(EBADF),
  FAULT = SOCKET_ERR(EFAULT),
  HOST_UNREACHABLE = SOCKET_ERR(EHOSTUNREACH),
  IN_PROGRESS = SOCKET_ERR(EINPROGRESS),
  INTERRUPTED = SOCKET_ERR(EINTR),
  INVALID_ARGUMENT = SOCKET_ERR(EINVAL),
  MESSAGE_SIZE = SOCKET_ERR(EMSGSIZE),
  NAME_TOO_LONG = SOCKET_ERR(ENAMETOOLONG),
  NETWORK_DOWN = SOCKET_ERR(ENETDOWN),
  NETWORK_RESET = SOCKET_ERR(ENETRESET),
  NETWORK_UNREACHABLE = SOCKET_ERR(ENETUNREACH),
  NO_DESCRIPTOR = SOCKET_ERR(EMFILE),
  NO_BUFFER = SOCKET_ERR(ENOBUFS),
  NO_MEMORY = WIN_OR_POSIX(NATIVE_ERR(ERROR_OUTOFMEMORY), NATIVE_ERR(ENOMEM)),
  NO_PERMISSION = WIN_OR_POSIX(NATIVE_ERR(ERROR_ACCESS_DENIED), NATIVE_ERR(EPERM)),
  NO_PROTOCAL_OPTION = SOCKET_ERR(ENOPROTOOPT),
  NO_SUCH_DEVIVE = WIN_OR_POSIX(NATIVE_ERR(ERROR_BAD_UNIT), NATIVE_ERR(ENODEV)),
  NOT_CONNECTED = SOCKET_ERR(ENOTCONN),
  NOT_SOCKET = SOCKET_ERR(ENOTSOCK),
  OPERATION_ABORTED = WIN_OR_POSIX(NATIVE_ERR(ERROR_OPERATION_ABORTED), NATIVE_ERR(ECANCELED)),
  OPERATION_NOT_SUPPORTED = SOCKET_ERR(EOPNOTSUPP),
  SHUTDOWN = SOCKET_ERR(ESHUTDOWN),
  TIMED_OUT = SOCKET_ERR(ETIMEDOUT),
  TRYAGAIN = WIN_OR_POSIX(NATIVE_ERR(ERROR_RETRY), NATIVE_ERR(EAGAIN)),
  WOULDBLOCK = NATIVE_ERR(EWOULDBLOCK),
};

}
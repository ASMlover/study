// generated automatically from auxiliary\random.wren, do not edit

static const str_t kLibSource =
"\n"
"foreign class Random {\n"
"  construct new() {\n"
"    seed()\n"
"  }\n"
"\n"
"  construct new(seed_val) {\n"
"    if (seed_val is Numeric) {\n"
"      seed(seed_val)\n"
"    } else if (seed_val is Sequence) {\n"
"      if (seed_val.isEmpty) Fiber.abort(\"sequence cannot be empty\")\n"
"\n"
"      var seeds = []\n"
"      for (element in seed) {\n"
"        if (!(element is Numeric)) Fiber.abort(\"sequence elements must all be numbers\")\n"
"\n"
"        seeds.add(element)\n"
"        if (seeds.count == 16) break\n"
"      }\n"
"\n"
"      // cycle the values to fill in any missing slots\n"
"      var i = 0\n"
"      while (seeds.count < 16) {\n"
"        seeds.add(seeds[i])\n"
"        i = i + 1\n"
"      }\n"
"\n"
"      seed(\n"
"        seeds[0], seeds[1], seeds[2], seeds[3],\n"
"        seeds[4], seeds[5], seeds[6], seeds[7],\n"
"        seeds[8], seeds[9], seeds[10], seeds[11],\n"
"        seeds[12], seeds[13], seeds[14], seeds[15])\n"
"    } else {\n"
"      Fiber.abort(\"seed must be a number or a sequence of numbers\")\n"
"    }\n"
"  }\n"
"\n"
"  foreign seed()\n"
"  foreign seed(seed_val)\n"
"  foreign seed(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16)\n"
"\n"
"  foreign float()\n"
"  float(max) { float() * max }\n"
"  float(min, max) { float() * (max - min) + min }\n"
"\n"
"  foreign int()\n"
"  int(max) { (float() * max).floor }\n"
"  int(min, max) { (float() * (max - min)).floor + min }\n"
"}\n";

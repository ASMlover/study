
/////////////////////////////////////////////////
// test assignment and print
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> ASSIGNMENT TEST";
var s = "Hello, world!";
print s;

/////////////////////////////////////////////////
// test block
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> BLOCKS TEST";
{
  var s = "in first block";
  print s;
}

print s;

var a = 3;
var b = 4;
{
  var a = 33;
  var b = 44;
  {
    var a = 333;
    print a + b;
  }
  print a + b;
}
print a;
print b;

/////////////////////////////////////////////////
// test `if` statement condition logical
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> IF CONDITION TEST";
if (true) {
  print "IF BRANCH";
  if (a + b)
    print "a + b";
} else {
  print "ELSE BRANCH";
}

if (false) {
  print "IF BRANCH";
} else {
  print "ELSE BRANCH";
}

/////////////////////////////////////////////////
// test `and` and `or` logical operators
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> LOGICAL OPERATORS TEST";
print "Hello" or "world!";
print nil or "yes";
print "Hello" and "world!";
print nil and "yes" or "no";

/////////////////////////////////////////////////
// test `while` logical
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> WHILE LOOP LOGICAL TEST";
var count = 10;
var while_cond = true;
while (while_cond) {
  if (count == 0) {
    while_cond = false;
  }
  else {
    print count;
  }
  count = count - 1;
}

/////////////////////////////////////////////////
// test `for` logical
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> FOR LOOP LOGICAL TEST";
for (var i = 0; i < 10; i = i + 1) {
  print i * i;
}

/////////////////////////////////////////////////
// test native function
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> NATIVE FUNCTION TEST";
var beg = clock();
for (var i = 0; i < 10; i = i + 1) {
  print i * i * i;
}
print clock() - beg;

/////////////////////////////////////////////////
// test function
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> FUNCTION TEST";
fun count(n) {
  if (n > 1)
    count(n - 1);
  print n;
}
count(3);

fun add(a, b, c) {
  print a + b + c;
}
print add;
add(1, 2, 3);

fun say_hello(first, last) {
  print "Hello, " + first + " " + last + "!";
}
say_hello("Dear", "LOX");

/////////////////////////////////////////////////
// test function return
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> FUNCTION RETURN TEST";
fun fibonacci(n) {
  if (n <= 1)
    return n;
  return fibonacci(n - 2) + fibonacci(n - 1);
}
for (var i = 0; i < 10; i = i + 1) {
  print fibonacci(i);
}

/////////////////////////////////////////////////
// test function closure
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> FUNCTION CLOSURE TEST";
fun make_counter() {
  var i = 0;
  fun _count() {
    i = i + 1;
    print i;
  }
  return _count;
}
var counter = make_counter();
counter();
counter();

fun make_point(x, y) {
  fun _closure(method) {
    if (method == "x")
      return x;
    if (method == "y")
      return y;
    return "unknown method <fn argument: " + method + ">";
  }
  return _closure;
}

var point = make_point(2, 3);
print point("x");
print point("y");
print point("z");

/////////////////////////////////////////////////
// test static scope
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> STATIC SCOPE TEST";
var a = "global";
{
  fun showA() {
    print a;
  }

  showA();
  var a = "block";
  showA();
}

// // this will checking error for this scope
// var a = "outer";
// {
//   var a = a;
// }

/////////////////////////////////////////////////
// test class
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> CLASS TEST";
class Breakfast {
  cook() {
    print "Eggs a fryin!";
  }

  serve(who) {
    print "Enjoy your Breakfast, " + who + " ...";
  }
}
print Breakfast;

var bf = Breakfast();
print bf;

bf.name = "<bf>";
print bf.name;
bf.cook();
bf.serve("Jack");

class English {
  speak() {
    this.x = 100;
    this.y = 200;
    this.speak_msg("This is a test !!!");
  }

  speak_msg(msg) {
    print "English - " + msg;
    print this.x;
    print this.y;
  }
}
var eng = English();
eng.speak();

class Foo {
  ctor() {
    print this;
  }
}
var foo = Foo();
print foo.ctor();

/////////////////////////////////////////////////
// test class inheritance
/////////////////////////////////////////////////
print "\n>>>>>>>>>>>>>>>>>> CLASS INHERITANCE TEST";
class Base {
  show() {
    print "This is show function in class <Base>";
  }
}
var NotClass = "It's not a class";
class Child < Base {
  show() {
    super.show();
    print "This is show function in class <Child>";
  }
}

var c = Child();
c.show();

class A {
  method() {
    print "class A method";
  }
}

class B < A {
  method() {
    super.method();
    print "class B method";
  }
  test() {
    super.method();
  }
}

class C < B {}
C().test();
C().method();

// Copyright (c) 2017 ASMlover. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//  * Redistributions of source code must retain the above copyright
//    notice, this list ofconditions and the following disclaimer.
//
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materialsprovided with the
//    distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
#pragma once

#include <system_error>
#include <Chaos/Base/Platform.h>
#if defined(CHAOS_WINDOWS)
# include <winerror.h>
#else
# include <cerrno>
# include <netdb.h>
#endif

#if defined(CHAOS_WINDOWS)
# define NETPP_NATIVE_ERROR(e) e
# define NETPP_SOCKET_ERROR(e) WSA##e
# define NETPP_WIN_OR_POSIX(e_win, e_posix) e_win
#else
# define NETPP_NATIVE_ERROR(e) e
# define NETPP_SOCKET_ERROR(e) e
# define NETPP_WIN_OR_POSIX(e_win, e_posix) e_posix
#endif

namespace netpp {

namespace error {
  enum NetppErrors {
    ACCESS_DENIED = NETPP_SOCKET_ERROR(EACCES),
    ADDRESS_IN_USE = NETPP_SOCKET_ERROR(EADDRINUSE),
    ALREADY_CONNECTED = NETPP_SOCKET_ERROR(EISCONN),
    ALREADY_STARTED = NETPP_SOCKET_ERROR(EALREADY),
    CONNECTION_ABORTED = NETPP_SOCKET_ERROR(ECONNABORTED),
    CONNECTION_REFUSED = NETPP_SOCKET_ERROR(ECONNREFUSED),
    CONNECTION_RESET = NETPP_SOCKET_ERROR(ECONNRESET),
    BAD_DESCRIPTOR = NETPP_SOCKET_ERROR(EBADF),
    FAULT = NETPP_SOCKET_ERROR(EFAULT),
    HOST_UNREACHABLE = NETPP_SOCKET_ERROR(EHOSTUNREACH),
    IN_PROGRESS = NETPP_SOCKET_ERROR(EINPROGRESS),
    INTERRUPTED = NETPP_SOCKET_ERROR(EINTR),
    INVALID_ARGUMENT = NETPP_SOCKET_ERROR(EINVAL),
    MESSAGE_SIZE = NETPP_SOCKET_ERROR(EMSGSIZE),
    NAME_TOO_LONG = NETPP_SOCKET_ERROR(ENAMETOOLONG),
    NETWORK_DOWN = NETPP_SOCKET_ERROR(ENETDOWN),
    NETWORK_RESET = NETPP_SOCKET_ERROR(ENETRESET),
    NETWORK_UNREACHABLE = NETPP_SOCKET_ERROR(ENETUNREACH),
    NO_DESCRIPTOR = NETPP_SOCKET_ERROR(EMFILE),
    NO_BUFFER = NETPP_SOCKET_ERROR(ENOBUFS),
    NO_MEMORY = NETPP_WIN_OR_POSIX(
        NETPP_NATIVE_ERROR(ERROR_OUTOFMEMORY), NETPP_NATIVE_ERROR(ENOMEM)),
    NO_PERMISSION = NETPP_WIN_OR_POSIX(
        NETPP_NATIVE_ERROR(ERROR_ACCESS_DENIED), NETPP_NATIVE_ERROR(EPERM)),
    NO_PROTOCOL_OPTION = NETPP_SOCKET_ERROR(ENOPROTOOPT),
    NO_SUCH_DEVICE = NETPP_WIN_OR_POSIX(
        NETPP_NATIVE_ERROR(ERROR_BAD_UNIT), NETPP_NATIVE_ERROR(ENODEV)),
    NOT_CONNECTED = NETPP_SOCKET_ERROR(ENOTCONN),
    NOT_SOCKET = NETPP_SOCKET_ERROR(ENOTSOCK),
    OPERATION_ABORTED = NETPP_WIN_OR_POSIX(
        NETPP_NATIVE_ERROR(ERROR_OPERATION_ABORTED),
        NETPP_NATIVE_ERROR(ECANCELED)),
    OPERATION_NOT_SUPPORTED = NETPP_SOCKET_ERROR(EOPNOTSUPP),
    SHUTDOWN = NETPP_SOCKET_ERROR(ESHUTDOWN),
    TIMED_OUT = NETPP_SOCKET_ERROR(ETIMEDOUT),
    TRYAGAIN = NETPP_WIN_OR_POSIX(
        NETPP_NATIVE_ERROR(ERROR_RETRY), NETPP_NATIVE_ERROR(EAGAIN)),
    WOULD_BLOCK = NETPP_SOCKET_ERROR(EWOULDBLOCK),
  };
}


inline void throw_error(const std::error_code& ec) {
  if (ec)
    throw std::system_error(ec);
}

inline void throw_error(const std::error_code& ec, const char* location) {
  if (ec) {
    std::string err_msg(location);
    err_msg += ":";
    err_msg += ec.message();
    throw std::system_error(ec, err_msg);
  }
}

}

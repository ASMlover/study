# **名字与地址转换**
***


## **1. 域名系统**
    1) 域名系统主要用于主机名字与IP地址之间的映射；
> ### **1.1 资源记录**
    1) DNS中的条目为资源记录：
        * A     => A记录把一个主机名映射成一个32位的IPv4地址；
        * AAAA  => 为'四A'记录的AAAA记录把一个主机映射成一个128位IPv6地址；
        * PTR   => 是'指针记录', PTR记录把IP地址映射成主机名；
        * MX    => MX记录把一个主机指定作为给定主机的“邮件交换器”；
        * CNAME => 代表(canonical name)(规范名字)，常见用法是为常用的服务指
                   派CNAME记录；
> ### **1.2 解析器和名字服务器**
    1) /etc/resolv.conf通常包含本地名字服务器主机的IP地址；
    2) 解析器使用UDP向本地名字服务器发出查询，如果本地名字服务器不知道，通常
       会使用UDP在整个英特网上查询其他名字服务器；
       如果名字太长，超出UDP消息的承载能力，会自动切换到TCP；
> ### **1.3 DNS替代方法**
    1) 不使用DNS也可能获取名字和地址信息；
    2) 常用的替代方法：
        * 静态主机文件(/etc/hosts)
        * 网络信息系统
        * 轻权目录访问协议
    3) Solaris2.x，HP-UX10及后续，FreeBSD5.x及后续使用/etc/nsswitch.conf;
       AIX使用/etc/netsvc.conf;
       BIND 9.2.2提供自己的名为信息检索服务的版本，使用/etc/irs.conf;
    4) 如使用名字服务器查找主机名，那所有这些系统都使用/etc/resolv.conf指定
       名字服务器的IP地址；


## **2. gethostbyname函数**
    1) 查找主机名最基本是使用gethostbyname，成功返回一个指向hostent的指针，
       该结构中含有所查找主机的所有IPv4地址；其局限是只能返回IPv4地址；
    2) gethostbyname定义
        #include <netdb.h>
        struct hostent* gethostbyname(const char* hostname);
                => 成功返回非空指针，出错返回NULL且设置h_errno
    3) 返回的hostent结构如下：
        struct hostent {
          char*  h_name;
          char** h_aliases;
          int    h_addrtype;
          int    h_length;
          char** h_addr_list;
        };
        * gethostbyname执行的是对A记录的查询，只能返回IPv4地址；
        * h_name为所查询主机的规范名字；
        * h_aliases是一个别名数组；
        * h_addrtype可取值为AF_INET；
        * h_addr_list是一个IP地址列表；
    4) gethostbyname与其他套接字函数不同在于：发生错误时不设置errno，而将全
       局整数变量设置为<netdb.h>定义的下列常量：
        * HOST_NOT_FOUND
        * TRY_AGAIN
        * NO_RECOVERY
        * NO_DATA(等同于NO_ADDRESS) => 表示指定名字有效，但没有A记录；

## **3. gethostbyaddr函数**
        #include <netdb.h>
        struct hostent* gethostbyaddr(
                const char* addr, socklen_t len, int family);
                => 成功返回非空指针，出错返回NULL且设置h_errno
    1) 由一个二进制的IP地址找到对应的主机名，与gethostbyname相反；
    2) addr是一个指向存放IPv4地址的某个in_addr结构的指针；len是结构大小；
       family是AF_INET；


## **4. getservbyname和getservbyport函数**
    1) 如在程序中通过名字而非端口号来指代一个服务，且从名字到端口号的映射关
       系保存在一个文件(/etc/services)，那端口发生了改动，我们只需要修改这个
       文件的某行而不用重新编译程序；
    2) getservbyname的定义：
        #include <netdb.h>
        struct servent* getservbyname(
                const char* servname, const char* protoname);
                => 成功返回非空指针，出错返回NULL
        * 返回的结构如下：
          struct servent {
            char*   s_name;
            char**  s_aliases;
            int     s_port;
            char*   s_proto;
          };
        * servname必须指定，如果同时指定了协议，那指定服务必须有匹配的协议；
    3) 根据给定端口号和可选协议查找相应服务：
        #include <netdb.h>
        struct servent* getservbyport(int port, const char* protoname);
                => 成功返回非空指针，出错返回NULL
        * port必须是网络字节序


## **5. getattrinfo函数**
    1) 能处理名字到地址以及服务到端口的转换，返回是一个sockaddr结构而不是一
       个地址列表；
    2) getattrinfo定义：
        #include <netdb.h>
        int getattrinfo(const char* hostname, const char* service,
                const struct addrinfo* hints, struct addrinfo** result);
                => 成功返回0，出错返回非0
    3) result返回一个指向addrinfo结构的链表指针，结构如下：
        struct addrinfo {
          int              ai_flags;
          int              ai_family;
          int              ai_socktype;
          int              ai_protocol;
          socklen_t        ai_addrlen;
          char*            ai_canonname;
          struct sockaddr* ai_addr;
          struct addrinfo* ai_next;
        };
    4) hostname是一个主机名或地址串；service是一个服务名或十进制端口号数串；
       hints可是一个空指针也可以是一个指向某addrinfo的指针；
    5) hints结构中调用者可以设置的成员有：
        * ai_flags(零个或多个或在一起的AI_xxx)
        * ai_family(某个AF_xxx)
        * ai_socktype(某个SOCK_xxx)
        * ai_protocol

        ai_flags成员可用表示如下：
          * AI_PASSIVE      => 套接字将用于被动打开；
          * AI_CANONNAME    => 告知getattrinfo返回主机的规范名字；
          * AI_NUMERICHOST  => 防止任何类型的名字到地址映射，hostname必须是
                               一个地址串；
          * AI_NUMERICSERV  => 防止任何类型的名字到地址映射，service必须是一
                               个十进制端口号数串；
          * AI_V4MAPPED     => 如同时指定ai_family成员的值是AF_INET6，那如果
                               没有可以的AAAA记录，返回与A记录对应的IPv4映射
                               的IPv6地址；
          * AI_ADDRCONFIG   => 按所在主机的配置选择返回地址类型，只查找与所
                               在主机回馈接口以外的网络接口配置的IP地址版本
                               一致的地址；
    6) 导致返回多个addrinfo的情况有：
        * 如与hostname参数关联的地址有多个，那么适用于所请求地址族的每个地址
          都返回一个对应的结构；
        * 如service指定的服务器支持多个套接字类型，那每个套接字类型都可能返
          回一个对应的结构，具体取决于hints结构的ai_socktype成员；


## **6. `gai_strerror`函数**
        #include <netdb.h>
        const char* gai_strerror(int error);
                => 返回指向错误描述消息字符串的指针
    返回错误信息：
      * EAI_AGAIN     => 名字解析中临时失败
      * EAI_BADFLAGS  => ai_flags的值无效
      * EAI_FAIL      => 名字解析中不可恢复地失败
      * EAI_FAMILY    => 不支持ai_family
      * EAI_MEMORY    => 内存分配失败
      * EAI_NONAME    => hostname或service未提供，或不可知
      * EAI_OVERFLOW  => 用户参数缓冲区溢出(仅限getnameinfo函数)
      * EAI_SERVICE   => 不支持ai_socktype类型的service
      * EAI_SOCKTYPE  => 不支持ai_socktype
      * EAI_SYSTEM    => 在errno变量中有系统错误返回


## **7. freeaddrinfo函数**
    1) 由getaddrinfo返回的所有存储空间都是动态获取的(addrinfo结构，ai_addr结
       构和ai_canonname字符串)；需要调用freeaddrinfo来释放；
    2) 函数定义：
        #include <netdb.h>
        void freeaddrinfo(struct addrinfo* ai);
        * ai指向由getaddrinfo返回的第一个addrinfo结构


## **8. getaddrinfo函数：IPv6**
    需要注意的：
      * getaddrinfo处理两个不同的输入：
        a、套接字地址结构，调用者期待返回的地址结构符合这个类型；
        b、资源记录类型，在DNS或其他数据库中执行的查找符合这个类型；
      * 由调用者在hints结构中提供的地址族指定调用者期待返回的套接字地址结构
        类型；
      * 如果调用者指定AF_UNSPEC，那么getaddrinfo返回的是适用于指定主机名和服
        务器名且适合任意协议族的地址；
      * 如果设置了AI_PASSIVE标志但没指定主机名，那IPv6通配地址应该作为
        sockaddr_in6结构返回；IPv4通配地址应该作为sockaddr_in结构返回；
      * 在hints结构的ai_family成员中指定的地址族以及在ai_flags成员中指定的
        AI_V4MAPPED和AI_ALL等标志决定了在DNS中查找的资源记录类型，也决定了返
        回地址的类型；
      * 主机名参数还可以是IPv6的十六进制数串或IPv4的点分十进制数串；

## **9. getnameinfo函数**
    1) 与getaddrinfo互补，以一个套接字地址为参数，返回描述其中的主机的一个字
       符串和描述其中的服务的另一个字符串；
    2) 函数原型如下：
        #include <netdb.h>
        int getnameinfo(const struct* sockaddr, socklen_t addrlen, 
                char* host, socklen_t hostlen, 
                char* serv, socklen_t servlen, int flags);
                => 成功返回0，出错返回非0
    3) sockaddr指向一个套接字地址结构，包含待转换成直观可读的字符串的协议地
       址，addrlen是这个结构的长度；
    4) 待返回的2个直观可读字符串由调用者预先分配存储空间，host和hostlen指定
       主机字符串；serv和servlen指定服务字符串；如果不想返回则将hostlen和
       servlen指定为0即可；
    5) flags的取值如下：
        * NI_DGRAM        => 数据报服务
        * NI_NAMEREQD     => 若不能从地址解析出名字则返回错误
        * NI_NOFQDN       => 至返回FQDN的主机名部分
        * NI_NUMERICHOST  => 以数串格式返回主机字符串
        * NI_NUMERICSCOPE => 以数串格式返回范围标识字符串
        * NI_NUMERICSERV  => 以数串格式返回服务字符串

## **2. `gethostbyname_r`和`gethostbyaddr_r`函数**
    1) 有两种方法可以把不可重入的函数改为可重入函数

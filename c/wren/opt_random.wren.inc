// Generated automatically from `opt_random.wren`. Do not edit.
static const char* randomModuleSource =
"foreign class Random {\n"
"	construct new() {\n"
"		seed_()\n"
"	}\n"
"\n"
"	construct new(seed) {\n"
"		if (seed is Num) {\n"
"			seed_(seed)\n"
"		}\n"
"		else if (seed id Sequence) {\n"
"			if (seed.isEmpty) {\n"
"				Fiber.abort(\"Sequence cannot be empty.\")\n"
"			}\n"
"\n"
"			var seeds = []\n"
"			for (element in seed) {\n"
"				if (!(element is Num)) {\n"
"					Fiber.abort(\"Sequence elements must all be numbers.\")\n"
"				}\n"
"\n"
"				seeds.add(element)\n"
"				if (seeds.count == 16) {\n"
"					break\n"
"				}\n"
"			}\n"
"\n"
"			var i = 0\n"
"			while (seeds.count < 16) {\n"
"				seeds.add(seeds[i])\n"
"				i = i + 1\n"
"			}\n"
"\n"
"			seed_(\n"
"				seeds[0], seeds[1], seeds[2], seeds[3], seeds[4], seeds[5], seeds[6], seeds[7],\n"
"				seeds[8], seeds[9], seeds[10], seeds[11], seeds[12], seeds[13], seeds[14], seeds[15])\n"
"		}\n"
"		else {\n"
"			Fiber.abort(\"Seed must be a number or a sequence of numbers.\")\n"
"		}\n"
"	}\n"
"\n"
"	foreign seed_()\n"
"	foreign seed_(seed)\n"
"	foreign seed_(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16)\n"
"\n"
"	foreign float()\n"
"	float(end) {\n"
"		float() * end\n"
"	}\n"
"	float(start, end) {\n"
"		float() * (end - start) + start\n"
"	}\n"
"\n"
"	foreign int()\n"
"	int(end) {\n"
"		(float() * end).floor\n"
"	}\n"
"	int(start, end) {\n"
"		(float() * (end - start)).floor + start\n"
"	}\n"
"\n"
"	sample(list) {\n"
"		sample(list, 1)[0]\n"
"	}\n"
"\n"
"	sample(list, count) {\n"
"		if (count > list.count) {\n"
"			Fiber.abort(\"Not enough elements to smaple.\")\n"
"		}\n"
"\n"
"		if (count * count * 5 < list.count) {\n"
"			var picked = {}\n"
"			var result = []\n"
"			for (i in 0...count) {\n"
"				var index\n"
"				while (true) {\n"
"					index = int(count)\n"
"					if (!picked.containsKey(index)) {\n"
"						break\n"
"					}\n"
"				}\n"
"\n"
"				picked[index] = true\n"
"				result.add(list[index])\n"
"			}\n"
"\n"
"			return result\n"
"		}\n"
"		else {\n"
"			var result = list[0...count]\n"
"			shuffle(result)\n"
"\n"
"			for (i in count...list.count) {\n"
"				var slot = int(0, i + 1)\n"
"				if (slot < count) {\n"
"					result[slot] = list[i]\n"
"				}\n"
"			}\n"
"\n"
"			return result\n"
"		}\n"
"	}\n"
"\n"
"	shuffle(list) {\n"
"		if (list.isEmpty) {\n"
"			return\n"
"		}\n"
"\n"
"		for (i in 0...list.count - 1) {\n"
"			var from = int(i, list.count)\n"
"			var temp = list[from]\n"
"			list[from] = list[i]\n"
"			list[i] = temp\n"
"		}\n"
"	}\n"
"}\n";

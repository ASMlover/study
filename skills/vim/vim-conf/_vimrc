set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


" configure vim
silent func! OSX()
  return has("macunix")
endfunction
silent func! LINUX()
  return (has("unix") && !has("macunix") && !has("win32unix"))
endfunction
silent func! WINDOWS()
  return (has("win32") || has("win64"))
endfunction

" don't bother with vi compatibility
set nocompatible
" enable syntax highlighting
syntax on

" configure Vundle
filetype on " without this vim emits a zero exit status, later, because of :ft off
filetype off

if WINDOWS()
  set rtp+=$VIM/vimfiles/bundle/Vundle.vim/
  call vundle#rc("$VIM/vimfiles/bundle/")
else
  set rtp+=~/.vim/bundle/Vundle.vim/
  call vundle#rc()
endif

" install Vundle bundles
if WINDOWS()
  if filereadable(expand("$VIM/_vimrc.bundles"))
    source $VIM/_vimrc.bundles
  endif
  if filereadable(expand("$VIM/_vimrc.bundles.local"))
    source $VIM/_vimrc.bundles.local
  endif
else
  if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
  endif
  if filereadable(expand("~/.vimrc.bundles.local"))
    source ~/.vimrc.bundles.local
  endif
endif

" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set showcmd
set expandtab                                                " expand tabs to space
set tabstop=8                                                " actual tabs occupy 8 characters
set shiftwidth=2                                             " normal mode indentation commands use 4 spaces
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set smartcase                                                " case-sensitive search if any caps
set fileencoding=utf-8                                       " default fileencoding is utf-8
set fileencodings=utf-8,ucs-bom,default,latin1
set fileformat=unix                                          " default fileformat is unix
set fileformats=unix,dos,mac
set nobackup                                                 " do not create backup file
set noundofile                                               " do not create undo file
set number                                                   " show line numbers
set ruler                                                    " show where you are
set laststatus=2                                             " always show statusline
set cursorline                                               " show cursor of current line
set autochdir

colorscheme molokai
set t_Co=256
set background=dark
set guifont=Consolas:h11
if WINDOWS()
  au GUIEnter * simalt ~x
endif

" keyboard shortcuts
let mapleader = ','
nnoremap <leader>l :Align
nnoremap <leader>a :Ag<space>
nnoremap <silent> <leader>d :NERDTreeToggle<CR>
nnoremap <silent> <leader>f :NERDTreeFind<CR>
nnoremap <silent> <leader>] :TagbarToggle<CR>
" key-mapping for SingleCompile(compile or run a single source file)
nnoremap <silent> <F9> :SCCompile<CR>
nnoremap <silent> <F10> :SCCompileRun<CR>

" configure for bundles plugins
if WINDOWS()
  " neocomplete configure
  if filereadable(expand("$VIM/vimrc.bundles/neocomplete.vimrc"))
    source $VIM/vimrc.bundles/neocomplete.vimrc
  endif
  
  " vim-marching configure
  if filereadable(expand("$VIM/vimrc.bundles/vim-marching.vimrc"))
    source $VIM/vimrc.bundles/vim-marching.vimrc
  endif
else
  " neocomplete configure
  if filereadable(expand("~/vimrc.bundles/neocomplete.vimrc"))
    source ~/vimrc.bundles/neocomplete.vimrc
  endif
  
  " vim-marching configure
  if filereadable(expand("~/vimrc.bundles/vim-marching.vimrc"))
    source ~/vimrc.bundles/vim-marching.vimrc
  endif
endif

" source local vimrc
if WINDOWS()
  if filereadable(expand("$VIM/_vimrc.local"))
    source $VIM/_vimrc.local
  endif
else
  if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
  endif
endif

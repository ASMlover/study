// Copyright (c) 2017 ASMlover. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//  * Redistributions of source code must retain the above copyright
//    notice, this list ofconditions and the following disclaimer.
//
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materialsprovided with the
//    distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";
import "nyx_common.proto";
package nyx.core;

option cc_generic_services = true;
option py_generic_services = true;

// client和gate服务器之间的通信协议

message EncryptString {
  bytes encrypt_str = 1; // 加密的字符串
}

message SessionSeed {
  int64 seed = 1; // 加密的随机数种子
}

message SessionKey {
  bytes random_padding_head = 1; // 随机padding
  bytes session_key = 2; // 加密的会话字符串
  int64 seed = 3; // 服务器发送给客户端的随机数种子
  bytes random_padding_tail = 4; // 随机padding
}

// rpc service的定义规范中S表示service

service SClientToGate {
  // client发送给gate服务器

  // 请求通信的随机数
  rpc seed_request(Void) returns(Void);
  // 告知服务器通信密钥
  rpc session_key(EncryptString) returns(Void);
  // 连接服务器进行认证
  rpc connect_server(ConnectRequest) returns(Void);
  // 客户端entity发送给服务器的rpc消息
  rpc entity_message(EntityRpcMessage) returns(Void);
  // 给soul发送的消息
  rpc soul_message(EntityRpcMessage) returns(Void);
  // 将客户端字符串的md5对应的索引注册到服务器
  rpc reg_md5index(Md5Index) returns(Void);
}

service SGateToClient {
  // gate服务器返回client

  // 返回通信随机数
  rpc seed_response(SessionSeed) returns(Void);
  // 通信密钥OK
  rpc on_session_key(Void) returns(Void);
  // 回复客户端的连接请求
  rpc on_connect_server(ConnectResponse) returns(Void);
  // 服务器通知客户端创建entity
  rpc create_entity(EntityInfo) returns(Void);
  // 服务器通知客户端销毁entity
  rpc destroy_entity(EntityInfo) returns(Void);
  // 服务器发送给客户端的rpc调用
  rpc entity_message(EntityRpcMessage) returns(Void);
  // 服务器发送给客户端额外的带外信息
  rpc chat_to_client(OutbandInfo) returns(Void);
  // 将服务器字符串的md5对应的索引注册到客户端
  rpc reg_md5index(Md5Index) returns(Void);
}

// Copyright (c) 2017 ASMlover. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//  * Redistributions of source code must retain the above copyright
//    notice, this list ofconditions and the following disclaimer.
//
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materialsprovided with the
//    distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";
import "nyx_common.proto";
import "nyx_gate_game.proto";
package nyx.core;

option cc_generic_services = true;
option py_generic_services = true;

// nyx.core服务器gate和game在game manager之间的通信

message GameServerInfoList {
  // game服务器的服务器接入点信息
  repeated ServerInfo game_servers = 1;
}

message CallbackID {
  int32 callback_id = 1; // 在需要回调的时候设置，默认应该为-1
}

message GlobalEntityRegisterMessage {
  // 全局的entity对象注册信息
  int32 callback_id = 1; // 需要回调的时候设置，默认应该为-1
  bytes entity_unique_id = 2; // entity的全局唯一标识
  EntityMailbox maibox = 3; // global entity的mailbox
  bool override = 4; // 如果需要迁移对象，需要强制override该对象
}

message ForwardMessageHeader {
  // game manager转发的entity消息需要添加该头部信息
  int32 callback_id = 1; // 需要回调的时候设置，默认应该为-1
  EntityMailbox src_mailbox = 2;
  EntityMailbox dst_mailbox = 3;
  bytes client_id = 4;
}

message EntityInfoHeader {
  // gate与game之间，game与game manager之间的调用头部信息
  enum ServerType {
    ANY_WHERE = 0; // 任意地方
    SPECIFY_TYPE = 1;
    SPECIFY_SERVER = 2;
  }
  int32 callback_id = 1;
  bool trans_entity = 2; // True则迁移现有的entity，False则创建一个新的entity
  bool create_fromdb = 3; // 如果是新的entity，标识是否从db中读取数据来创建
  int32 create_anywhere = 4; // 创建entity，创建在任意地方还是指定的地方
  ServerInfo dst_server = 5; // 指定的服务器相关信息
  ClientInfo client_info = 6;
}

message GlobalMessage {
  bytes message = 1; // global信息
}

message GlobalData {
  bytes key = 1; // 编码后的对象
  bytes value = 2; // 编码后的对象
}

message GameManagerReturnValue {
  // game调用game manager的rpc后需要game manager返回的信息
  enum CallbackType {
    NO_CALLBACK = 0;
    REG_ENTITY_MAILBOX = 1;
    FORWARD_ENTITY_MESSAGE = 2;
    CREATE_ENTITY = 3;
  }
  CallbackType type = 1; // 回调类型，默认应该是NO_CALLBACK
  int32 callback_id = 2; // 在rpc调用的时候回传，默认应该是-1
  bool return_bvalue = 3; // bool值使用这个
  bytes return_svalue = 4; // 复杂的值需要编码成字符串
  bytes error_msg = 5; // 出错的错误信息
}

message ScriptInfo {
  // admin需要game服务器运行指定的脚本信息
  bytes script_content = 1; // 脚本字符串信息
}

message ControlCommand {
  // nyx.core个服务器的控制码信息
  enum ControlOperation {
    NOP = 0; // 什么都不做

    // 对gate服务器的控制
    FORBIDDEN_NEW_CONNECTION = 1; // 禁止新连接(登录)
    IGNORE_CLIENT_ENTITY_MESSAGE = 2; // 忽略client发送的所有信息
    DISCONNECT_ALL_CONNECTION = 3; // 踢掉所有的客户端用户
    CLOSE_GATE = 4; // 结束gate服务器进程

    // 对game服务器的控制
    NOTIFY_SERVER_CLOSING = 5; // 通知服务器即将关闭，需要调用所有entity的on_server_closing回调
    NOTIFY_SERVER_CLOSED = 6; // 通知服务器关闭，需要调用所有entity的on_server_closed
    CLOSE_GAME = 7; // 结束game服务器进程

    // 对db manager服务器的控制
    CLOSE_DB_MANAGER = 8; // 结束dbmanager服务器进程

    // 对game manager服务器的控制
    CLOSE_GAME_MANAGER = 9; // 结束game manager服务器进程
  }
  ControlOperation op = 1; // 默认应该为NOP
}

service SClientToGameManager {
  // gate、game、db或admin客户端向game manager发送的rpc调用

  ///// admin客户端向game manager之间的通信
  // 请求所有game运行指定的脚本信息
  rpc run_script(ScriptInfo) returns(Void);
  // 向所有game server等发送控制命令
  rpc server_control(ControlCommand) returns(Void);

  ///// db manager和game manager之间的通信
  // db manager向game manager注册自己
  rpc reg_db_manager(Void) returns(Void);

  ///// gate和game manager之间的通信
  // gate向game manager请求所有game server的信息
  rpc get_game_server_list(Void) returns(Void);

  ////// game和game manager之间的通信
  // game向game manager注册自己
  rpc reg_game_server(ServerInfo) returns(Void);
  // game向game manager注册全局entity的mailbox，会转发到所有的game，直到删除
  rpc reg_global_entity_mailbox(GlobalEntityRegisterMessage) returns(Void);
  rpc unreg_global_entity_mailbox(GlobalEntityRegisterMessage) returns(Void);
  // game向game manager请求转发消息到另一个entity
  rpc forward_entity_message(EntityRpcMessage) returns(Void);
  // game发送给game manager转发的全局信息，game manager需要转发给当前在线的所有game，game再转发给所有entity
  rpc global_entity_message(GlobalEntityRpcMessage) returns(Void);
  // game向game manager转发全局消息，game manager不保存，直接转发（不可靠）
  rpc global_message(GlobalMessage) returns(Void);
  // game向game manager转发全局数据，game manager会先保存下来再转发给所有game（可靠）
  rpc global_data(GlobalData) returns(Void);
  // game请求删除全局数据
  rpc del_global_data(GlobalData) returns(Void);
  // game请求game manager创建entity信息，game manager选择任意或指定的game
  rpc create_entity(EntityInfo) returns(Void);
  // game通过game manager要求创建的entity成功，game manager则通知发起创建entity的game进程
  rpc game_create_entity_success(GameManagerReturnValue) returns(Void);
  // game回应game manager保存keep-alive的命令
  rpc on_keep_alive(Void) returns(Void);
}

service SGameManagerToClient {
  // game manager返回game，gate以及db manager发起的请求

  ///// gate和game manager之间的通信
  // 返回gate请求的game server列表信息
  rpc on_get_game_server_list(GameServerInfoList) returns(Void);

  ///// game和game manager之间的通信
  // game manager通知game，其他game注册的全局entity的mailbox信息
  rpc on_reg_global_entity_mailbox(GlobalEntityRegisterMessage) returns(Void);
  rpc on_unreg_global_entity_mailbox(GlobalEntityRegisterMessage) returns(Void);

  ///// game和gate都需要处理的控制信息
  rpc on_server_control(ControlCommand) returns(Void);

  // game manager收到转发请求后, 转发消息给对应的game
  rpc on_forward_entity_message(EntityRpcMessage) returns(Void);
  // game manager转发到game的global rpc消息，需要每个game调用所有的avatar
  rpc on_global_entity_message(GlobalEntityRpcMessage) returns(Void);
  // game manager转发的全局不可靠消息（当时在线的所有game服务器）
  rpc on_global_message(GlobalMessage) returns(Void);
  // game manager转发的全局可靠数据，会存下来发给所有的game
  rpc on_global_data(GlobalData) returns(Void);
  // 删除全局数据
  rpc on_del_global_data(GlobalData) returns(Void);
  // game manager通知game创建entity
  rpc create_entity(EntityInfo) returns(Void);
  // game请求的game manager的操作，game manager的返回
  rpc game_manager_callback(GameManagerReturnValue) returns(Void);
  // 通知game运行指定的脚本
  rpc run_script(ScriptInfo) returns(Void);
  // game manager向game发起保持keep-alive请求
  rpc keep_alive(Void) returns(Void);
}
